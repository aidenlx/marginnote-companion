const { build } = require("esbuild");
// const { lessLoader } = require("esbuild-plugin-less");

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const fs = require("fs");
const renamePlugin = {
  name: "rename-styles",
  setup: (build) => {
    build.onEnd(() => {
      const { outfile } = build.initialOptions;
      const outcss = outfile.replace(/\.js$/, ".css");
      const fixcss = outfile.replace(/main\.js$/, "styles.css");
      if (fs.existsSync(outcss)) {
        // console.log("Renaming", outcss, "to", fixcss);
        fs.renameSync(outcss, fixcss);
      }
    });
  },
};
const copyManifest = {
  name: "copy-manifest",
  setup: (build) => {
    build.onEnd(() => {
      fs.copyFileSync("manifest.json", "build/manifest.json");
    });
  },
};

const isProd = process.env.BUILD === "production";

const path = require('path');
const aliasPlugin = require('esbuild-plugin-path-alias');
(async () => {
  try {
    await build({
      entryPoints: ["src/mn-main.ts"],
      bundle: true,
      watch: !isProd,
      platform: "browser",
      external: ["obsidian", "electron"],
      format: "cjs",
      mainFields: ["browser", "module", "main"],
      banner: { js: banner },
      loader: { ".svg": "text" },
      sourcemap: isProd ? false : "inline",
      minify: isProd,
      define: {
        "process.env.NODE_ENV": JSON.stringify(process.env.BUILD),
      },
      outfile: "build/main.js",
      plugins: [
        // lessLoader({
        //   javascriptEnabled: true,
        // }),
        aliasPlugin({
          // must be absolute path
          'assets': path.resolve(__dirname, './assets')
        }),
        renamePlugin,
        copyManifest,
      ],
    });
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
})();
